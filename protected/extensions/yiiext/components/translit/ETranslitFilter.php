<?php/** * ETranslitFilter class file. */class ETranslitFilter extends CValidator {	/**	 * @var string the name of the attribute to be translit.	 */	public $translitAttribute;	/**	 * @var boolean whether to translit value only when the attribute value is null or empty string.	 * Defaults to true. If false, the attribute will always be translit.	 */	public $setOnEmpty=true;	/**	 * @var bool	 * использовать МВД версию транслитерирования	 */	public $useMvd = true;	/**	 * Validates the attribute of the object.	 * @param CModel $object the object being validated	 * @param string $attribute the attribute being validated	 * @throws CException	 */	protected function validateAttribute($object,$attribute) {		if($this->setOnEmpty && !$this->isEmpty($object->$attribute))			return;		if(!$object->hasAttribute($this->translitAttribute))			throw new CException(Yii::t('yiiext','Active record "{class}" is trying to select an invalid column "{column}". Note, the column must exist in the table or be an expression with alias.',				array('{class}'=>get_class($object),'{column}'=>$this->translitAttribute)));		$cyrillicToLatin = self::cyrillicToLatin($object->getAttribute($this->translitAttribute), $this->useMvd);		$model = $object->findByAttributes(array($attribute => $cyrillicToLatin));        // Если есть статья с таким именем, то выводим ошибку//		if ($model && $model->id != $object->id) {//			$cyrillicToLatin .= time();//		}		$object->$attribute = $cyrillicToLatin;	}	/**	 * Translit text from cyrillic to latin letters.	 * @param string $str the text being translit.	 * @param bool $useMvd	 * @param bool $saveDot	 * @return string	 */	public static function cyrillicToLatin($str, $useMvd = false, $saveDot = false) {		$tr = array(			"А"=>"a","Б"=>"b","В"=>"v","Г"=>"g",			"Д"=>"d","Е"=>"e","Ж"=>"j","З"=>"z","И"=>"i",			"Й"=>"y","К"=>"k","Л"=>"l","М"=>"m","Н"=>"n",			"О"=>"o","П"=>"p","Р"=>"r","С"=>"s","Т"=>"t",			"У"=>"u","Ф"=>"f","Х"=>"h","Ц"=>"ts","Ч"=>"ch",			"Ш"=>"sh","Щ"=>"sch","Ъ"=>"","Ы"=>"yi","Ь"=>"",			"Э"=>"e","Ю"=>"yu","Я"=>"ya","а"=>"a","б"=>"b",			"в"=>"v","г"=>"g","д"=>"d","е"=>"e","ж"=>"j",			"з"=>"z","и"=>"i","й"=>"y","к"=>"k","л"=>"l",			"м"=>"m","н"=>"n","о"=>"o","п"=>"p","р"=>"r",			"с"=>"s","т"=>"t","у"=>"u","ф"=>"f","х"=>"h",			"ц"=>"ts","ч"=>"ch","ш"=>"sh","щ"=>"sch","ъ"=>"y",			"ы"=>"yi","ь"=>"","э"=>"e","ю"=>"yu","я"=>"ya",			" "=> "-", "."=> $saveDot ? '.' : '', "/"=> "-"		);		$mvd = array_merge($tr, array(			'ы' => 'y', 'Ы' => 'y',			'ъ' => '"', 'Ъ' => '"',			'ь' => '\'', 'Ь' => '\'',			'щ' => 'shch', 'Щ' => 'shch',			'х' => 'kh', 'Х' => 'kh',			'ж' => 'zh', 'Ж' => 'zh',			'ё' => 'ye', 'Ё' => 'ye',			'й' => 'i', 'Й' => 'i',		));		if (preg_match('/[^A-Za-z0-9\_\-]/', $str)) {			$str = strtr($str, $useMvd ? $mvd : $tr);			$str = preg_replace('/[^A-Za-z0-9\_\-\.]/', '', $str);		}		return strtolower($str);	}}